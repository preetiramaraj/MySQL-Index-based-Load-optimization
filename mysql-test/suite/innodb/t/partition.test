--source include/have_innodb.inc

--echo #
--echo # Test of optimizer estimates
--echo #
CREATE TABLE t0 (a int PRIMARY KEY, b int, c varchar(64));
CREATE TABLE t1
(a int,
 b int,
 c varchar(64),
 PRIMARY KEY (a),
 KEY (b),
 KEY (c,b))
ENGINE = InnoDB
PARTITION BY HASH (a) PARTITIONS 5;

--echo # Set up the rows so that the following query would match
--echo # 100 PK values but only 10 'b' values. But 90 of the matching
--echo # PKs will be in the smallest partition.
--echo # Since the fix for bug#1364811 will ha_partition only check the biggest
--echo # partitions, but ha_innopart will check all partitions when estimating
--echo # numbers of records in range. Resulting in ha_partition will
--echo # assume there are only 10 matching PK values and choose to do search
--echo # by PK but ha_innopart will search by secondary index 'b' since it
--echo # will prefer to read 10 records from the secondary index over reading
--echo # 100 records from the PRIMARY index.
--echo # SELECT * FROM t1 WHERE a BETWEEN 1 AND 450 AND b BETWEEN 1 AND 10;


--echo # Using t0 to prevent any issues with purge in t1.
INSERT INTO t0 VALUES (1,0,"common"),(2,0,"common"),(3,0,"common"),
(4,0,"common"),(5,0,"common"), (6,0,"common"),(7,0,"common"),(8,0,"common"),
(9,0,"common"),(10,0,"common");
INSERT INTO t0 SELECT a + 10, b, c FROM t0;
INSERT INTO t0 SELECT a + 20, b, c FROM t0;
INSERT INTO t0 SELECT a + 40, b, c FROM t0;
INSERT INTO t0 SELECT a + 80, b, c FROM t0;
INSERT INTO t0 SELECT a + 160, b, c FROM t0;
INSERT INTO t0 SELECT a + 320, b, c FROM t0;
INSERT INTO t0 SELECT a + 640, b, c FROM t0;
DELETE FROM t0 WHERE a BETWEEN 13 AND 450 AND (a % 5) <> 0;
DELETE FROM t0 WHERE a > 450 AND (a % 5) = 0 LIMIT 250;

# Uncomment these to see the resulting distribution...
#SELECT COUNT(*) FROM t0 WHERE a BETWEEN 1 AND 450;
#SELECT COUNT(*) FROM t0 WHERE a BETWEEN 1 AND 450 AND (a % 5) = 0;
#SELECT (a % 5) as part, COUNT(*) FROM t0 GROUP BY part;

UPDATE t0 SET b = a, c = "MATCH!" WHERE a <= 10;
#SELECT COUNT(*) FROM t0 WHERE b BETWEEN 1 AND 10;
#SELECT (a % 5) as part, COUNT(*) FROM t0 WHERE b BETWEEN 1 AND 10 GROUP BY part;
INSERT INTO t1 SELECT * FROM t0;
DROP TABLE t0;

ANALYZE TABLE t1;
EXPLAIN SELECT * FROM t1 WHERE a BETWEEN 1 AND 450 AND b BETWEEN 1 AND 10;
FLUSH STATUS;
--sorted_result
SELECT * FROM t1 WHERE a BETWEEN 1 AND 450 AND b BETWEEN 1 AND 10;
let $get_handler_status_counts= SELECT * FROM INFORMATION_SCHEMA.SESSION_STATUS
WHERE VARIABLE_NAME LIKE 'HANDLER_%' AND VARIABLE_VALUE > 0;
--source include/get_handler_status_counts.inc

DROP TABLE t1;

--echo # Test of index_merge and delete
CREATE TABLE `t1` (
  `a` int(11) NOT NULL,
  `b` int(11) NOT NULL,
  KEY `a` (`a`),
  KEY `b` (`b`)
)
/*!50100 PARTITION BY HASH (a)
PARTITIONS 3 */;
INSERT INTO t1 VALUES (0,0),(0,0),(1,0),(1,0),(2,0),(2,0),(0,0);
INSERT INTO t1 SELECT t1.a,t1.b FROM t1, t1 t2;
INSERT INTO t1 VALUES (1,1),(2,2);

ANALYZE TABLE t1;
--replace_column 10 #
EXPLAIN SELECT * FROM t1 WHERE a = 4 OR b > 0;
--replace_column 10 #
EXPLAIN DELETE FROM t1 WHERE a = 4 OR b > 0;
SELECT * FROM t1 WHERE a = 4 OR b > 0;
SELECT COUNT(*) FROM t1;
DELETE FROM t1 WHERE a = 4 OR b > 0;
SELECT COUNT(*) FROM t1;
SELECT * FROM t1 WHERE a = 4 OR b > 0;
DROP TABLE t1;

--echo # more testing of index_merge and delete
CREATE TABLE t1
(a int not null,
 b int not null,
 INDEX(a),
 INDEX(b))
engine=InnoDB
PARTITION BY KEY(a,b) PARTITIONS 5;
INSERT INTO t1 VALUES (0,0),(1,1), (2,2), (3,3), (4,4),(5,5),(6,6),(7,7),(8,8),(9,9);
INSERT INTO t1 SELECT a + 10, b + 10 FROM t1;
INSERT INTO t1 SELECT a + 20, b + 20 FROM t1;
INSERT INTO t1 SELECT a + 40, b + 40 FROM t1;
INSERT INTO t1 SELECT a + 80, b + 80 FROM t1;
INSERT INTO t1 SELECT a + 160, b + 160 FROM t1;

ANALYZE TABLE t1;

--replace_column 10 #
EXPLAIN SELECT * FROM t1 WHERE a = 4 OR b < 3;
SELECT * FROM t1 WHERE a = 4 OR b < 3;

--replace_column 10 #
EXPLAIN SELECT * FROM t1 WHERE a BETWEEN 0 AND 20 OR b BETWEEN 10 AND 20;
SELECT * FROM t1 WHERE a BETWEEN 0 AND 20 OR b BETWEEN 10 AND 20;

--replace_column 10 #
EXPLAIN DELETE FROM t1 WHERE a = 4 OR b < 3;
DELETE FROM t1 WHERE a = 4 OR b < 3;

--replace_column 10 #
EXPLAIN DELETE FROM t1 WHERE a BETWEEN 0 AND 20 OR b BETWEEN 10 AND 20;
SELECT * FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
DELETE FROM t1 WHERE a BETWEEN 0 AND 20 OR b BETWEEN 10 AND 20;

DROP TABLE t1;

--echo #
--echo # Bug#20584754: CAN'T FIND RECORD IN 'TABLE100_KEY_PK_PARTS_2_DATETIME_3'
--echo #
let $MYSQLD_DATADIR=`SELECT @@datadir`;
CREATE TABLE `t1` (
  `c1` tinyint unsigned DEFAULT NULL,
  `c2` char(1) DEFAULT NULL,
  `pk` tinyint NOT NULL,
  PRIMARY KEY (`pk`),
  KEY `c1` (`c1`),
  KEY `c2` (`c2`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1
/*!50100 PARTITION BY HASH (pk)
PARTITIONS 2 */;

--echo # Create the dataset in a separate table, so it can be loaded
--echo # directly without update/delete which may give unstable EXPLAIN
--echo # due to background pruning.
CREATE TABLE t0
(a tinyint not null auto_increment primary key,
 b char(1) DEFAULT 'a',
 c tinyint DEFAULT 1);
INSERT INTO t0 (a) VALUES (1), (2), (3), (4), (5), (6), (7), (8);
INSERT INTO t0 (a) SELECT NULL FROM t0, t0 t0_2 LIMIT 50;
UPDATE t0 SET c = NULL WHERE a IN (2,3,6,13,18);
INSERT INTO t1 SELECT c,b,a FROM t0;
DROP TABLE t0;

ANALYZE TABLE t1;

--replace_column 10 #
EXPLAIN SELECT
pk
FROM `t1`
WHERE `c1` IS  NULL OR `c2` = '0';

SELECT
pk
FROM `t1`
WHERE `c1` IS  NULL OR `c2` = '0';

DROP TABLE t1;

--echo #
--echo # Bug#20516390: PARTITIONED TABLE, TBLSPACE MOVE, ALTER, ASSERT
--echo # !(M_FILE_PER_TABLE && M_USE_SHAR
--echo #
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1.ibd';
CREATE TABLE t1
(a int not null,
 d int not null,
 b varchar(198) not null,
 c varchar(177),
 index(d),
 index(a),
 PRIMARY KEY (b(10), a, d),
 INDEX (c(95), b(95)),
 INDEX (b(5), c(10), a))
ENGINE=InnoDB stats_persistent=DEFAULT
PARTITION BY LINEAR HASH(d) PARTITIONS 2;
ALTER TABLE t1 TABLESPACE ts1;
ALTER TABLE t1 DROP PRIMARY KEY, ALGORITHM=DEFAULT;
DROP TABLE t1;
DROP TABLESPACE ts1;

--echo #
--echo # Bug #20593808: CRASH WITH PARTITIONED TABLES
--echo # MULTITABLE DELETE
--echo #

--echo Test DML with index scan on partitioned table
--echo #1. test delete with join using PK index scan on partitioned table
eval CREATE TABLE t1 (
  col_1_int int,
  col_2_text text)
  ENGINE=InnoDB;

SHOW CREATE TABLE t1;

--echo #insert two records in t1
INSERT INTO t1 VALUES (5, 'row to delete');
INSERT INTO t1 VALUES (3, 'row to keep');

SELECT * FROM t1 ORDER BY col_1_int;

eval CREATE TABLE t2 (
  col_1_int int,
  col_2_int int,
  col_3_text text,
  PRIMARY KEY(col_1_int, col_3_text(100)),
  KEY idx1 (col_2_int, col_1_int))
  ENGINE=InnoDB
  PARTITION BY KEY(col_1_int) partitions 5;

SHOW CREATE TABLE t2;

--echo #insert five records in t2
INSERT INTO t2 VALUES (91, 11, 'bigger value for no-op');
INSERT INTO t2 VALUES ( 4, 25, 'smaller value to trigger delete');
INSERT INTO t2 VALUES (35, 33, 'bigger value for no-op addlen');
INSERT INTO t2 VALUES (55, 42, 'bigger value for no-op addlen + addlen + addlen');
INSERT INTO t2 VALUES (82, 54, 'bigger value for no-op addlen + addlen');

SELECT * FROM t2 ORDER BY col_1_int;

--echo # test delete with join and index scan
DELETE t1 FROM t2, t1  WHERE t2.col_1_int <= t1.col_1_int;

--echo expect one record
SELECT * FROM t1;

DROP TABLE t1;
DROP TABLE t2;

--echo #2. test delete with join using secondary index scan on partitioned table
eval CREATE TABLE t1 (
  col_1_int int,
  col_2_text text)
  ENGINE=InnoDB;

SHOW CREATE TABLE t1;

--echo #insert two records in t1
INSERT INTO t1 VALUES (5, 'row to delete');
INSERT INTO t1 VALUES (3, 'row to keep');

SELECT * FROM t1 ORDER BY col_1_int;

eval CREATE TABLE t2 (
  col_1_int int,
  col_2_int int,
  col_3_text text,
  PRIMARY KEY(col_2_int, col_1_int),
  KEY idx1(col_1_int, col_3_text(100)))
  ENGINE=InnoDB
  PARTITION BY KEY(col_2_int) partitions 5;

SHOW CREATE TABLE t2;

--echo #insert five records in t2
INSERT INTO t2 VALUES (91, 11, 'bigger value for no-op');
INSERT INTO t2 VALUES ( 4, 25, 'smaller value to trigger delete');
INSERT INTO t2 VALUES (35, 33, 'bigger value for no-op addlen');
INSERT INTO t2 VALUES (55, 42, 'bigger value for no-op addlen + addlen + addlen');
INSERT INTO t2 VALUES (82, 54, 'bigger value for no-op addlen + addlen');

SELECT * FROM t2 ORDER BY col_1_int;

--echo # test delete with join and index scan
DELETE t1 FROM t2, t1  WHERE t2.col_1_int <= t1.col_1_int;

--echo expect one record
SELECT * FROM t1;

DROP TABLE t1;
DROP TABLE t2;

--echo #
--echo # Bug #20949314: PARTITION_HELPER::PH_RND_INIT(BOOL): ASSERTION
--echo #

CREATE TABLE t1 (c1 INT);
INSERT INTO t1 VALUES (3), (4), (5), (1), (2);

CREATE TABLE t2 PARTITION BY KEY (c1) PARTITIONS 3
AS
SELECT * FROM t1;

DELETE A FROM t1 AS A WHERE A.c1 IN
(SELECT c1 FROM t2 AS B WHERE B.c1 = A.c1);

SELECT * from t1;

DROP TABLE t1;
DROP TABLE t2;

--echo #
--echo # Bug#20819189: Assert if .frm exists but no partitioned InnoDB table
--echo #
CREATE TABLE t1 (a int) ENGINE=InnoDB PARTITION BY HASH (a) PARTITIONS 2;
--copy_file $MYSQLD_DATADIR/test/t1.frm $MYSQLD_DATADIR/test/t2.frm
--error ER_GET_ERRNO
SELECT * FROM t2;
--remove_file $MYSQLD_DATADIR/test/t2.frm
# Flush table is needed to remove the 'orphan' t2 definition.
FLUSH TABLE t2;
DROP TABLE t1;

--echo #
--echo # Bug#21211524: CRASH IN ACTUAL_KEY_PARTS WITH PARTITIONED TABLES
--echo #
CREATE TABLE t1(
  col1 SET('') CHARACTER SET UTF16 COLLATE UTF16_SPANISH_CI,
  col2 INT,
  PRIMARY KEY (col2, col1),
  UNIQUE KEY (col1, col2))
  ENGINE=INNODB
  PARTITION BY KEY (col1);

SELECT * from t1 WHERE col1 BETWEEN 0x92 AND "";

DROP TABLE t1;

--echo #
--echo # Bug#21794110: ASSERTION `MP->COUNT > 0 && MY_THREAD_EQUAL
--echo #

CREATE TABLE t1(col1 INT PRIMARY KEY, col2 CHAR(10))
ENGINE=INNODB
PARTITION BY HASH(col1) PARTITIONS 2;

INSERT INTO t1 VALUES(0, 'string1');
ALTER TABLE t1 CHANGE col1 col1 INT UNSIGNED AUTO_INCREMENT;
SHOW CREATE TABLE t1;

DROP TABLE t1;
